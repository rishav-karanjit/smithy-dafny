// Code generated by smithy-go-codegen DO NOT EDIT.

package simpleconstraints

import (
	"github.com/Smithy-dafny/TestModels/Constraints/simpleconstraintsinternaldafnytypes"
	"github.com/Smithy-dafny/TestModels/Constraints/simpleconstraintstypes"
	"github.com/dafny-lang/DafnyRuntimeGo/dafny"
	"unicode/utf8"
	"fmt"
)

func GetConstraintsInput_FromDafny(dafnyInput simpleconstraintsinternaldafnytypes.GetConstraintsInput) simpleconstraintstypes.GetConstraintsInput {

	return simpleconstraintstypes.GetConstraintsInput{MyString: func() *string {
		var s string
		if dafnyInput.Dtor_MyString().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_MyString().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}(), NonEmptyString: func() *string {
		var s string
		if dafnyInput.Dtor_NonEmptyString().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_NonEmptyString().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}(), StringLessThanOrEqualToTen: func() *string {
		var s string
		if dafnyInput.Dtor_StringLessThanOrEqualToTen().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_StringLessThanOrEqualToTen().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}(), MyBlob: func() []byte {
		var b []byte
		if dafnyInput.Dtor_MyBlob().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_MyBlob().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}(), NonEmptyBlob: func() []byte {
		var b []byte
		if dafnyInput.Dtor_NonEmptyBlob().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_NonEmptyBlob().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}(), BlobLessThanOrEqualToTen: func() []byte {
		var b []byte
		if dafnyInput.Dtor_BlobLessThanOrEqualToTen().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_BlobLessThanOrEqualToTen().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}(), MyList: func() []string {
		var fieldValue []string
		if dafnyInput.Dtor_MyList().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_MyList().UnwrapOr(nil).(dafny.Sequence)); ; {
			val, ok := i()
			if !ok {
				break
			}
			fieldValue = append(fieldValue, *func() *string {
				var s string
				if val == nil {
					return nil
				}
				for i := dafny.Iterate(val); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}())
		}
		return fieldValue
	}(), NonEmptyList: func() []string {
		var fieldValue []string
		if dafnyInput.Dtor_NonEmptyList().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_NonEmptyList().UnwrapOr(nil).(dafny.Sequence)); ; {
			val, ok := i()
			if !ok {
				break
			}
			fieldValue = append(fieldValue, *func() *string {
				var s string
				if val == nil {
					return nil
				}
				for i := dafny.Iterate(val); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}())
		}
		return fieldValue
	}(), ListLessThanOrEqualToTen: func() []string {
		var fieldValue []string
		if dafnyInput.Dtor_ListLessThanOrEqualToTen().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_ListLessThanOrEqualToTen().UnwrapOr(nil).(dafny.Sequence)); ; {
			val, ok := i()
			if !ok {
				break
			}
			fieldValue = append(fieldValue, *func() *string {
				var s string
				if val == nil {
					return nil
				}
				for i := dafny.Iterate(val); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}())
		}
		return fieldValue
	}(), MyMap: func() map[string]string {
		var m map[string]string = make(map[string]string)
		if dafnyInput.Dtor_MyMap().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_MyMap().UnwrapOr(nil).(dafny.Map).Items()); ; {
			val, ok := i()
			if !ok {
				break
			}
			m[*func() *string {
				var s string
				if (*val.(dafny.Tuple).IndexInt(0)) == nil {
					return nil
				}
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()] = *func() *string {
				var s string
				if (*val.(dafny.Tuple).IndexInt(1)) == nil {
					return nil
				}
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1))); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()
		}
		return m
	}(), NonEmptyMap: func() map[string]string {
		var m map[string]string = make(map[string]string)
		if dafnyInput.Dtor_NonEmptyMap().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_NonEmptyMap().UnwrapOr(nil).(dafny.Map).Items()); ; {
			val, ok := i()
			if !ok {
				break
			}
			m[*func() *string {
				var s string
				if (*val.(dafny.Tuple).IndexInt(0)) == nil {
					return nil
				}
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()] = *func() *string {
				var s string
				if (*val.(dafny.Tuple).IndexInt(1)) == nil {
					return nil
				}
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1))); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()
		}
		return m
	}(), MapLessThanOrEqualToTen: func() map[string]string {
		var m map[string]string = make(map[string]string)
		if dafnyInput.Dtor_MapLessThanOrEqualToTen().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_MapLessThanOrEqualToTen().UnwrapOr(nil).(dafny.Map).Items()); ; {
			val, ok := i()
			if !ok {
				break
			}
			m[*func() *string {
				var s string
				if (*val.(dafny.Tuple).IndexInt(0)) == nil {
					return nil
				}
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()] = *func() *string {
				var s string
				if (*val.(dafny.Tuple).IndexInt(1)) == nil {
					return nil
				}
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1))); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()
		}
		return m
	}(), OneToTen: func() *int32 {
		var b int32
		if dafnyInput.Dtor_OneToTen().UnwrapOr(nil) == nil {
			return nil
		}
		b = dafnyInput.Dtor_OneToTen().UnwrapOr(nil).(int32)
		return &b
	}(), MyTenToTen: func() *int64 {
		var b int64
		if dafnyInput.Dtor_myTenToTen().UnwrapOr(nil) == nil {
			return nil
		}
		b = dafnyInput.Dtor_myTenToTen().UnwrapOr(nil).(int64)
		return &b
	}(), GreaterThanOne: func() *int32 {
		var b int32
		if dafnyInput.Dtor_GreaterThanOne().UnwrapOr(nil) == nil {
			return nil
		}
		b = dafnyInput.Dtor_GreaterThanOne().UnwrapOr(nil).(int32)
		return &b
	}(), LessThanTen: func() *int32 {
		var b int32
		if dafnyInput.Dtor_LessThanTen().UnwrapOr(nil) == nil {
			return nil
		}
		b = dafnyInput.Dtor_LessThanTen().UnwrapOr(nil).(int32)
		return &b
	}(), MyUtf8Bytes: func() *string {
		var s string
		a := utf8.Valid(dafnyInput.Dtor_MyUtf8Bytes().UnwrapOr(nil).(*dafny.ArraySequence).ToByteArray())
		// fmt.Println(a)
		if !a {
			fmt.Errorf("Error")
		}
		if dafnyInput.Dtor_MyUtf8Bytes().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_MyUtf8Bytes().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(uint8))
			}
		}
	}(), MyListOfUtf8Bytes: func() []string {
		var fieldValue []string
		if dafnyInput.Dtor_MyListOfUtf8Bytes().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_MyListOfUtf8Bytes().UnwrapOr(nil).(dafny.Sequence)); ; {
			val, ok := i()
			if !ok {
				break
			}
			fieldValue = append(fieldValue, *func() *string {
				var s string
				if val == nil {
					return nil
				}
				for i := dafny.Iterate(val); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(uint8))
					}
				}
			}())
		}
		return fieldValue
	}()}

}

func GetConstraintsOutput_FromDafny(dafnyOutput simpleconstraintsinternaldafnytypes.GetConstraintsOutput) simpleconstraintstypes.GetConstraintsOutput {

	return simpleconstraintstypes.GetConstraintsOutput{MyString: func() *string {
		var s string
		if dafnyOutput.Dtor_MyString().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_MyString().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}(), NonEmptyString: func() *string {
		var s string
		if dafnyOutput.Dtor_NonEmptyString().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_NonEmptyString().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}(), StringLessThanOrEqualToTen: func() *string {
		var s string
		if dafnyOutput.Dtor_StringLessThanOrEqualToTen().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_StringLessThanOrEqualToTen().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}(), MyBlob: func() []byte {
		var b []byte
		if dafnyOutput.Dtor_MyBlob().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_MyBlob().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}(), NonEmptyBlob: func() []byte {
		var b []byte
		if dafnyOutput.Dtor_NonEmptyBlob().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_NonEmptyBlob().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}(), BlobLessThanOrEqualToTen: func() []byte {
		var b []byte
		if dafnyOutput.Dtor_BlobLessThanOrEqualToTen().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_BlobLessThanOrEqualToTen().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}(), MyList: func() []string {
		var fieldValue []string
		if dafnyOutput.Dtor_MyList().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_MyList().UnwrapOr(nil).(dafny.Sequence)); ; {
			val, ok := i()
			if !ok {
				break
			}
			fieldValue = append(fieldValue, *func() *string {
				var s string
				if val == nil {
					return nil
				}
				for i := dafny.Iterate(val); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}())
		}
		return fieldValue
	}(), NonEmptyList: func() []string {
		var fieldValue []string
		if dafnyOutput.Dtor_NonEmptyList().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_NonEmptyList().UnwrapOr(nil).(dafny.Sequence)); ; {
			val, ok := i()
			if !ok {
				break
			}
			fieldValue = append(fieldValue, *func() *string {
				var s string
				if val == nil {
					return nil
				}
				for i := dafny.Iterate(val); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}())
		}
		return fieldValue
	}(), ListLessThanOrEqualToTen: func() []string {
		var fieldValue []string
		if dafnyOutput.Dtor_ListLessThanOrEqualToTen().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_ListLessThanOrEqualToTen().UnwrapOr(nil).(dafny.Sequence)); ; {
			val, ok := i()
			if !ok {
				break
			}
			fieldValue = append(fieldValue, *func() *string {
				var s string
				if val == nil {
					return nil
				}
				for i := dafny.Iterate(val); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}())
		}
		return fieldValue
	}(), MyMap: func() map[string]string {
		var m map[string]string = make(map[string]string)
		if dafnyOutput.Dtor_MyMap().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_MyMap().UnwrapOr(nil).(dafny.Map).Items()); ; {
			val, ok := i()
			if !ok {
				break
			}
			m[*func() *string {
				var s string
				if (*val.(dafny.Tuple).IndexInt(0)) == nil {
					return nil
				}
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()] = *func() *string {
				var s string
				if (*val.(dafny.Tuple).IndexInt(1)) == nil {
					return nil
				}
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1))); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()
		}
		return m
	}(), NonEmptyMap: func() map[string]string {
		var m map[string]string = make(map[string]string)
		if dafnyOutput.Dtor_NonEmptyMap().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_NonEmptyMap().UnwrapOr(nil).(dafny.Map).Items()); ; {
			val, ok := i()
			if !ok {
				break
			}
			m[*func() *string {
				var s string
				if (*val.(dafny.Tuple).IndexInt(0)) == nil {
					return nil
				}
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()] = *func() *string {
				var s string
				if (*val.(dafny.Tuple).IndexInt(1)) == nil {
					return nil
				}
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1))); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()
		}
		return m
	}(), MapLessThanOrEqualToTen: func() map[string]string {
		var m map[string]string = make(map[string]string)
		if dafnyOutput.Dtor_MapLessThanOrEqualToTen().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_MapLessThanOrEqualToTen().UnwrapOr(nil).(dafny.Map).Items()); ; {
			val, ok := i()
			if !ok {
				break
			}
			m[*func() *string {
				var s string
				if (*val.(dafny.Tuple).IndexInt(0)) == nil {
					return nil
				}
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()] = *func() *string {
				var s string
				if (*val.(dafny.Tuple).IndexInt(1)) == nil {
					return nil
				}
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1))); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()
		}
		return m
	}(), OneToTen: func() *int32 {
		var b int32
		if dafnyOutput.Dtor_OneToTen().UnwrapOr(nil) == nil {
			return nil
		}
		b = dafnyOutput.Dtor_OneToTen().UnwrapOr(nil).(int32)
		return &b
	}(), ThatTenToTen: func() *int64 {
		var b int64
		if dafnyOutput.Dtor_thatTenToTen().UnwrapOr(nil) == nil {
			return nil
		}
		b = dafnyOutput.Dtor_thatTenToTen().UnwrapOr(nil).(int64)
		return &b
	}(), GreaterThanOne: func() *int32 {
		var b int32
		if dafnyOutput.Dtor_GreaterThanOne().UnwrapOr(nil) == nil {
			return nil
		}
		b = dafnyOutput.Dtor_GreaterThanOne().UnwrapOr(nil).(int32)
		return &b
	}(), LessThanTen: func() *int32 {
		var b int32
		if dafnyOutput.Dtor_LessThanTen().UnwrapOr(nil) == nil {
			return nil
		}
		b = dafnyOutput.Dtor_LessThanTen().UnwrapOr(nil).(int32)
		return &b
	}(), MyUtf8Bytes: func() *string {
		var s string
		if dafnyOutput.Dtor_MyUtf8Bytes().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_MyUtf8Bytes().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(uint8))
			}
		}
	}(), MyListOfUtf8Bytes: func() []string {
		var fieldValue []string
		if dafnyOutput.Dtor_MyListOfUtf8Bytes().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_MyListOfUtf8Bytes().UnwrapOr(nil).(dafny.Sequence)); ; {
			val, ok := i()
			if !ok {
				break
			}
			fieldValue = append(fieldValue, *func() *string {
				var s string
				if val == nil {
					return nil
				}
				for i := dafny.Iterate(val); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(uint8))
					}
				}
			}())
		}
		return fieldValue
	}()}

}

func SimpleConstraintsException_FromDafny(dafnyOutput simpleconstraintsinternaldafnytypes.Error) simpleconstraintstypes.SimpleConstraintsException {
	return simpleconstraintstypes.SimpleConstraintsException{Message: func() *string {
		var s string
		if dafnyOutput.Dtor_message() == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_message()); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()}

}

func CollectionOfErrors_Output_FromDafny(dafnyOutput simpleconstraintsinternaldafnytypes.Error) simpleconstraintstypes.CollectionOfErrors {
	listOfErrors := dafnyOutput.Dtor_list()
	message := dafnyOutput.Dtor_message()
	t := simpleconstraintstypes.CollectionOfErrors{}
	for i := dafny.Iterate(listOfErrors); ; {
		val, ok := i()
		if !ok {
			break
		}
		err := val.(simpleconstraintsinternaldafnytypes.Error)
		t.ListOfErrors = append(t.ListOfErrors, Error_FromDafny(err))

	}
	t.Message = func() string {
		var s string
		for i := dafny.Iterate(message); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
	return t
}
func OpaqueError_Output_FromDafny(dafnyOutput simpleconstraintsinternaldafnytypes.Error) simpleconstraintstypes.OpaqueError {
	return simpleconstraintstypes.OpaqueError{
		ErrObject: dafnyOutput.Dtor_obj(),
	}
}

func Error_FromDafny(err simpleconstraintsinternaldafnytypes.Error) error {
	// Service Errors
	if err.Is_SimpleConstraintsException() {
		return SimpleConstraintsException_FromDafny(err)
	}

	//DependentErrors

	//Unmodelled Errors
	if err.Is_CollectionOfErrors() {
		return CollectionOfErrors_Output_FromDafny(err)
	}

	return OpaqueError_Output_FromDafny(err)
}

func SimpleConstraintsConfig_FromDafny(dafnyOutput simpleconstraintsinternaldafnytypes.SimpleConstraintsConfig) simpleconstraintstypes.SimpleConstraintsConfig {
	return simpleconstraintstypes.SimpleConstraintsConfig{}

}
