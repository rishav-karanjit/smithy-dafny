// Code generated by smithy-go-codegen DO NOT EDIT.

package simpleconstraints

import (
	"unicode/utf8"
	"fmt"

	"github.com/Smithy-dafny/TestModels/Constraints/simpleconstraintsinternaldafnytypes"
	"github.com/Smithy-dafny/TestModels/Constraints/simpleconstraintstypes"
	"github.com/dafny-lang/DafnyRuntimeGo/dafny"
	"github.com/dafny-lang/DafnyStandardLibGo/Wrappers"
)

func GetConstraintsInput_ToDafny(nativeInput simpleconstraintstypes.GetConstraintsInput) simpleconstraintsinternaldafnytypes.GetConstraintsInput {

	return func() simpleconstraintsinternaldafnytypes.GetConstraintsInput {

		return simpleconstraintsinternaldafnytypes.Companion_GetConstraintsInput_.Create_GetConstraintsInput_(func() Wrappers.Option {
			if nativeInput.MyString == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOfChars([]dafny.Char(*nativeInput.MyString)...))
		}(), func() Wrappers.Option {
			if nativeInput.NonEmptyString == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOfChars([]dafny.Char(*nativeInput.NonEmptyString)...))
		}(), func() Wrappers.Option {
			if nativeInput.StringLessThanOrEqualToTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOfChars([]dafny.Char(*nativeInput.StringLessThanOrEqualToTen)...))
		}(), func() Wrappers.Option {
			var v []interface{}
			if nativeInput.MyBlob == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			for _, e := range nativeInput.MyBlob {
				v = append(v, e)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(v...))
		}(), func() Wrappers.Option {
			var v []interface{}
			if nativeInput.NonEmptyBlob == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			for _, e := range nativeInput.NonEmptyBlob {
				v = append(v, e)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(v...))
		}(), func() Wrappers.Option {
			var v []interface{}
			if nativeInput.BlobLessThanOrEqualToTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			for _, e := range nativeInput.BlobLessThanOrEqualToTen {
				v = append(v, e)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(v...))
		}(), func() Wrappers.Option {
			if nativeInput.MyList == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			var fieldValue []interface{} = make([]interface{}, 0)
			for _, val := range nativeInput.MyList {
				element := func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(val)...)
				}()
				fieldValue = append(fieldValue, element)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(fieldValue...))
		}(), func() Wrappers.Option {
			if nativeInput.NonEmptyList == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			var fieldValue []interface{} = make([]interface{}, 0)
			for _, val := range nativeInput.NonEmptyList {
				element := func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(val)...)
				}()
				fieldValue = append(fieldValue, element)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(fieldValue...))
		}(), func() Wrappers.Option {
			if nativeInput.ListLessThanOrEqualToTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			var fieldValue []interface{} = make([]interface{}, 0)
			for _, val := range nativeInput.ListLessThanOrEqualToTen {
				element := func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(val)...)
				}()
				fieldValue = append(fieldValue, element)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(fieldValue...))
		}(), func() Wrappers.Option {
			if nativeInput.MyMap == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			fieldValue := dafny.NewMapBuilder()
			for key, val := range nativeInput.MyMap {
				fieldValue.Add(func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(key)...)
				}(), func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(val)...)
				}())
			}
			return Wrappers.Companion_Option_.Create_Some_(fieldValue.ToMap())
		}(), func() Wrappers.Option {
			if nativeInput.NonEmptyMap == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			fieldValue := dafny.NewMapBuilder()
			for key, val := range nativeInput.NonEmptyMap {
				fieldValue.Add(func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(key)...)
				}(), func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(val)...)
				}())
			}
			return Wrappers.Companion_Option_.Create_Some_(fieldValue.ToMap())
		}(), func() Wrappers.Option {
			if nativeInput.MapLessThanOrEqualToTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			fieldValue := dafny.NewMapBuilder()
			for key, val := range nativeInput.MapLessThanOrEqualToTen {
				fieldValue.Add(func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(key)...)
				}(), func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(val)...)
				}())
			}
			return Wrappers.Companion_Option_.Create_Some_(fieldValue.ToMap())
		}(), func() Wrappers.Option {
			if nativeInput.OneToTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(*nativeInput.OneToTen)
		}(), func() Wrappers.Option {
			if nativeInput.MyTenToTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(*nativeInput.MyTenToTen)
		}(), func() Wrappers.Option {
			if nativeInput.GreaterThanOne == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(*nativeInput.GreaterThanOne)
		}(), func() Wrappers.Option {
			if nativeInput.LessThanTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(*nativeInput.LessThanTen)
		}(), func() Wrappers.Option {
			if nativeInput.MyUtf8Bytes == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(func() []interface{} {
				utf8.ValidString(*nativeInput.MyUtf8Bytes)
				b := []byte(*nativeInput.MyUtf8Bytes)
				f := make([]interface{}, len(b))
				for i, v := range b {
					f[i] = v
				}
				return f
			}()...))
		}(), func() Wrappers.Option {
			if nativeInput.MyListOfUtf8Bytes == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			var fieldValue []interface{} = make([]interface{}, 0)
			for _, val := range nativeInput.MyListOfUtf8Bytes {
				element := func() dafny.Sequence {

					return dafny.SeqOf(func() []interface{} {
						utf8.ValidString(val)
						b := []byte(val)
						f := make([]interface{}, len(b))
						for i, v := range b {
							f[i] = v
						}
						return f
					}()...)
				}()
				fieldValue = append(fieldValue, element)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(fieldValue...))
		}())
	}()

}

func GetConstraintsOutput_ToDafny(nativeOutput simpleconstraintstypes.GetConstraintsOutput) simpleconstraintsinternaldafnytypes.GetConstraintsOutput {

	return func() simpleconstraintsinternaldafnytypes.GetConstraintsOutput {

		return simpleconstraintsinternaldafnytypes.Companion_GetConstraintsOutput_.Create_GetConstraintsOutput_(func() Wrappers.Option {
			if nativeOutput.MyString == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOfChars([]dafny.Char(*nativeOutput.MyString)...))
		}(), func() Wrappers.Option {
			if nativeOutput.NonEmptyString == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOfChars([]dafny.Char(*nativeOutput.NonEmptyString)...))
		}(), func() Wrappers.Option {
			if nativeOutput.StringLessThanOrEqualToTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOfChars([]dafny.Char(*nativeOutput.StringLessThanOrEqualToTen)...))
		}(), func() Wrappers.Option {
			var v []interface{}
			if nativeOutput.MyBlob == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			for _, e := range nativeOutput.MyBlob {
				v = append(v, e)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(v...))
		}(), func() Wrappers.Option {
			var v []interface{}
			if nativeOutput.NonEmptyBlob == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			for _, e := range nativeOutput.NonEmptyBlob {
				v = append(v, e)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(v...))
		}(), func() Wrappers.Option {
			var v []interface{}
			if nativeOutput.BlobLessThanOrEqualToTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			for _, e := range nativeOutput.BlobLessThanOrEqualToTen {
				v = append(v, e)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(v...))
		}(), func() Wrappers.Option {
			if nativeOutput.MyList == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			var fieldValue []interface{} = make([]interface{}, 0)
			for _, val := range nativeOutput.MyList {
				element := func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(val)...)
				}()
				fieldValue = append(fieldValue, element)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(fieldValue...))
		}(), func() Wrappers.Option {
			if nativeOutput.NonEmptyList == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			var fieldValue []interface{} = make([]interface{}, 0)
			for _, val := range nativeOutput.NonEmptyList {
				element := func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(val)...)
				}()
				fieldValue = append(fieldValue, element)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(fieldValue...))
		}(), func() Wrappers.Option {
			if nativeOutput.ListLessThanOrEqualToTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			var fieldValue []interface{} = make([]interface{}, 0)
			for _, val := range nativeOutput.ListLessThanOrEqualToTen {
				element := func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(val)...)
				}()
				fieldValue = append(fieldValue, element)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(fieldValue...))
		}(), func() Wrappers.Option {
			if nativeOutput.MyMap == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			fieldValue := dafny.NewMapBuilder()
			for key, val := range nativeOutput.MyMap {
				fieldValue.Add(func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(key)...)
				}(), func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(val)...)
				}())
			}
			return Wrappers.Companion_Option_.Create_Some_(fieldValue.ToMap())
		}(), func() Wrappers.Option {
			if nativeOutput.NonEmptyMap == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			fieldValue := dafny.NewMapBuilder()
			for key, val := range nativeOutput.NonEmptyMap {
				fieldValue.Add(func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(key)...)
				}(), func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(val)...)
				}())
			}
			return Wrappers.Companion_Option_.Create_Some_(fieldValue.ToMap())
		}(), func() Wrappers.Option {
			if nativeOutput.MapLessThanOrEqualToTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			fieldValue := dafny.NewMapBuilder()
			for key, val := range nativeOutput.MapLessThanOrEqualToTen {
				fieldValue.Add(func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(key)...)
				}(), func() dafny.Sequence {

					return dafny.SeqOfChars([]dafny.Char(val)...)
				}())
			}
			return Wrappers.Companion_Option_.Create_Some_(fieldValue.ToMap())
		}(), func() Wrappers.Option {
			if nativeOutput.OneToTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(*nativeOutput.OneToTen)
		}(), func() Wrappers.Option {
			if nativeOutput.ThatTenToTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(*nativeOutput.ThatTenToTen)
		}(), func() Wrappers.Option {
			if nativeOutput.GreaterThanOne == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(*nativeOutput.GreaterThanOne)
		}(), func() Wrappers.Option {
			if nativeOutput.LessThanTen == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(*nativeOutput.LessThanTen)
		}(), func() Wrappers.Option {
			if nativeOutput.MyUtf8Bytes == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(func() []interface{} {
				utf8.ValidString(*nativeOutput.MyUtf8Bytes)
				b := []byte(*nativeOutput.MyUtf8Bytes)
				f := make([]interface{}, len(b))
				for i, v := range b {
					f[i] = v
				}
				return f
			}()...))
		}(), func() Wrappers.Option {
			if nativeOutput.MyListOfUtf8Bytes == nil {
				return Wrappers.Companion_Option_.Create_None_()
			}
			var fieldValue []interface{} = make([]interface{}, 0)
			for _, val := range nativeOutput.MyListOfUtf8Bytes {
				element := func() dafny.Sequence {

					return dafny.SeqOf(func() []interface{} {
						utf8.ValidString(val)
						b := []byte(val)
						f := make([]interface{}, len(b))
						for i, v := range b {
							f[i] = v
						}
						return f
					}()...)
				}()
				fieldValue = append(fieldValue, element)
			}
			return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOf(fieldValue...))
		}())
	}()

}

func SimpleConstraintsException_ToDafny(nativeInput simpleconstraintstypes.SimpleConstraintsException) simpleconstraintsinternaldafnytypes.Error {
	return func() simpleconstraintsinternaldafnytypes.Error {

		return simpleconstraintsinternaldafnytypes.Companion_Error_.Create_SimpleConstraintsException_(func() dafny.Sequence {
			if nativeInput.Message == nil {
				return nil
			}
			return dafny.SeqOfChars([]dafny.Char(*nativeInput.Message)...)
		}())
	}()

}

func CollectionOfErrors_Input_ToDafny(nativeInput simpleconstraintstypes.CollectionOfErrors) simpleconstraintsinternaldafnytypes.Error {
	var e []interface{}
	for _, i2 := range nativeInput.ListOfErrors {
		e = append(e, Error_ToDafny(i2))
	}
	return simpleconstraintsinternaldafnytypes.Companion_Error_.Create_CollectionOfErrors_(dafny.SeqOf(e...), dafny.SeqOfChars([]dafny.Char(nativeInput.Message)...))
}
func OpaqueError_Input_ToDafny(nativeInput simpleconstraintstypes.OpaqueError) simpleconstraintsinternaldafnytypes.Error {
	return simpleconstraintsinternaldafnytypes.Companion_Error_.Create_Opaque_(nativeInput.ErrObject)
}

func Error_ToDafny(err error) simpleconstraintsinternaldafnytypes.Error {
	switch err.(type) {
	// Service Errors
	case simpleconstraintstypes.SimpleConstraintsException:
		return SimpleConstraintsException_ToDafny(err.(simpleconstraintstypes.SimpleConstraintsException))

	//DependentErrors

	//Unmodelled Errors
	case simpleconstraintstypes.CollectionOfErrors:
		return CollectionOfErrors_Input_ToDafny(err.(simpleconstraintstypes.CollectionOfErrors))

	default:
		return OpaqueError_Input_ToDafny(err.(simpleconstraintstypes.OpaqueError))
	}
}

func SimpleConstraintsConfig_ToDafny(nativeInput simpleconstraintstypes.SimpleConstraintsConfig) simpleconstraintsinternaldafnytypes.SimpleConstraintsConfig {
	return func() simpleconstraintsinternaldafnytypes.SimpleConstraintsConfig {

		return simpleconstraintsinternaldafnytypes.Companion_SimpleConstraintsConfig_.Create_SimpleConstraintsConfig_()
	}()

}
