// Code generated by smithy-go-codegen DO NOT EDIT.

package simpletypesbooleaninternaldafnywrapped

import (
	"Wrappers"
	"context"
	"simpletypesboolean"
	"simpletypesbooleaninternaldafnytypes"
	"types"
)

type Shim struct {
	simpletypesbooleaninternaldafnytypes.ISimpleTypesBooleanClient
	client *simpletypesboolean.Client
}

func WrappedSimpleBoolean(inputConfig simpletypesbooleaninternaldafnytypes.SimpleBooleanConfig) Wrappers.Result {
	var nativeConfig = simpletypesboolean.SimpleBooleanConfig_Output_FromDafny(inputConfig)
	var nativeClient, nativeError = simpletypesboolean.NewClient(nativeConfig)
	if nativeError != nil {
		return Wrappers.Companion_Result_.Create_Failure_(simpletypesbooleaninternaldafnytypes.Companion_Error_.Create_Opaque_(nativeError))
	}
	return Wrappers.Companion_Result_.Create_Success_(&Shim{client: nativeClient})
}

func (shim *Shim) GetBoolean(input simpletypesbooleaninternaldafnytypes.GetBooleanInput) Wrappers.Result {
	var native_request = simpletypesboolean.GetBoolean_Input_FromDafny(input)
	var native_response, native_error = shim.client.GetBoolean(context.Background(), native_request)
	if native_error != nil {
		switch native_error.(type) {

		case types.CollectionOfErrors:
			return Wrappers.Companion_Result_.Create_Failure_(simpletypesboolean.CollectionOfErrors_Input_ToDafny(native_error.(types.CollectionOfErrors)))
		default:
			return Wrappers.Companion_Result_.Create_Failure_(simpletypesboolean.OpaqueError_Input_ToDafny(native_error.(types.OpaqueError)))
		}
	}
	return Wrappers.Companion_Result_.Create_Success_(simpletypesboolean.GetBoolean_Output_ToDafny(*native_response))
}
